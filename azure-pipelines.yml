trigger: none

pr:
  branches:
    include:
      - main

parameters:
  - name: folderName
    displayName: "Select Terraform Folder"
    type: string
    default: "connected_online"
    values:
      - "firewall_bastion_hub"
      - "cloud_exclusive"
      - "cloud_exclusive_online"
      - "connected"
      - "connected_online"
      - "isolated"
      - "isolated_online"
      - "terraform-template"

  - name: environment
    displayName: "Select Environment"
    type: string
    default: dev
    values:
      - dev
      - test
      - prod

variables:
  - group: TerraformSecrets

stages:
  - stage: Terraform_Backend_Setup
    displayName: "Ensure Backend Infra Exists"
    jobs:
      - job: Create_Backend
        displayName: "Setup RG, SA, Container"
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: AzureCLI@2
            displayName: "Ensure Backend Infra"
            inputs:
              azureSubscription: "Terraform Deployment Connection_1"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                RG_NAME="rg-dev-001"
                SA_NAME="tfstatedemonew"
                CONTAINER_NAME="tfstate"
                LOCATION="Canada Central"

                echo "Creating RG if not exists..."
                az group show --name $RG_NAME || az group create --name $RG_NAME --location $LOCATION

                echo "Creating Storage Account if not exists..."
                az storage account show --name $SA_NAME --resource-group $RG_NAME || \
                  az storage account create --name $SA_NAME --resource-group $RG_NAME --location $LOCATION --sku Standard_LRS

                echo "Getting key..."
                KEY=$(az storage account keys list --account-name $SA_NAME --resource-group $RG_NAME --query '[0].value' -o tsv)

                echo "Creating Container if not exists..."
                az storage container show --name $CONTAINER_NAME --account-name $SA_NAME --account-key $KEY || \
                  az storage container create --name $CONTAINER_NAME --account-name $SA_NAME --account-key $KEY
            env:
              AZURE_DEVOPS_EXT_AZURE_RM_SERVICE_PRINCIPAL_KEY: $(ARM_CLIENT_SECRET)

  - stage: Terraform_Deployment
    displayName: "Terraform Deploy (${{ parameters.environment }})"
    dependsOn: Terraform_Backend_Setup
    jobs:
      - deployment: TerraformJob
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: TerraformInstaller@1
                  inputs:
                    terraformVersion: '1.9.2'

                # # Import existing resources 
                # - script: |
                #     echo "Auto-importing Azure resources into Terraform state..."
                #     cd $(Build.SourcesDirectory)/${{ parameters.folderName }}

                #     # List of resources to import
                #     #  declare -A resources
                #     #  resources["azurerm_route_table.this"]="/subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/rg-dev-001/providers/Microsoft.Network/routeTables/rt-navigator2"
                #     #  resources["azurerm_network_security_group.nsg"]="/subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/rg-dev-001/providers/Microsoft.Network/networkSecurityGroups/nsg-con-001"
                #     #  resources["module.vnet1.azapi_resource.vnet"]="/subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/rg-dev-001/providers/Microsoft.Network/virtualNetworks/vnet-dev-canadacentral-002"
                #     #  resources["module.route_table.azurerm_subnet_route_table_association.assoc"]= "/subscriptions/1e437fdf-bd78-431d-ba95-1498f0e84c10/resourceGroups/rg-dev-009/providers/Microsoft.Network/virtualNetworks/vnet-dev-canadacentral-009/subnets/snet-dev-canadacentral-009"

                #     # for tf_resource in "${!resources[@]}"; do
                #     #   id="${resources[$tf_resource]}"

                #     #   # Check if already in state
                #     #   if terraform state show "$tf_resource" &>/dev/null; then
                #     #     echo "$tf_resource already in state. Skipping import."
                #     #   else
                #     #     echo "Importing $tf_resource ..."
                #     #     terraform import "$tf_resource" "$id" || echo "Failed to import $tf_resource"
                #     #   fi
                #     # done
                #     IMPORT_FILE="import-map-${{ parameters.environment }}.json"
                #       if [ -f "$IMPORT_FILE" ]; then
                #         while IFS="=" read -r tf_resource id; do
                #           tf_resource=$(echo $tf_resource | xargs)
                #           id=$(echo $id | xargs | tr -d '"')
                #           if terraform state show "$tf_resource" &>/dev/null; then
                #             echo "$tf_resource already in state."
                #           else
                #             echo "Importing $tf_resource..."
                #             terraform import "$tf_resource" "$id" || echo "Failed to import $tf_resource"
                #           fi
                #         done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' "$IMPORT_FILE")
                #       else
                #         echo "No import map file found. Skipping imports."
                #       fi
                #   displayName: "Auto-Import Existing Resources"
                #   env:
                #     ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
                #     ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"
                #     ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
                #     ARM_TENANT_ID: "$(ARM_TENANT_ID)"
                

                # Terraform Init
                - task: AzureCLI@2
                  displayName: "Terraform Init"
                  inputs:
                    azureSubscription: "Terraform Deployment Connection_1"
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
                      terraform init -input=false \
                        -backend-config="resource_group_name=rg-dev-001" \
                        -backend-config="storage_account_name=tfstatedemonew" \
                        -backend-config="container_name=tfstate" \
                        -backend-config="key=terraform.tfstate" \
                        -backend-config="use_azuread_auth=true"
                  env:
                    ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
                    ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"
                    ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
                    ARM_TENANT_ID: "$(ARM_TENANT_ID)"

                - script: |
                    cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
                    terraform validate
                  displayName: "Terraform Validate"

                # Terraform Plan with -lock=false
                - task: AzureCLI@2
                  displayName: "Terraform Plan"
                  inputs:
                    azureSubscription: "Terraform Deployment Connection_1"
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
                      terraform plan -out=tfplan -input=false -lock=false
                  env:
                    ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
                    ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"
                    ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
                    ARM_TENANT_ID: "$(ARM_TENANT_ID)"

                # Terraform Apply with -lock=false
                - task: AzureCLI@2
                  displayName: "Terraform Apply"
                  inputs:
                    azureSubscription: "Terraform Deployment Connection_1"
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
                      terraform apply -auto-approve -lock=false tfplan
                  env:
                    ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
                    ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"
                    ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
                    ARM_TENANT_ID: "$(ARM_TENANT_ID)"
