trigger: none

pr:
  branches:
    include:
      - main

parameters:
  - name: folderName
    displayName: "Select Terraform Folder"
    type: string
    default: "connected_online"
    values:
      - "firewall_bastion_hub"
      - "cloud_exclusive"
      - "cloud_exclusive_online"
      - "connected"
      - "connected_online"
      - "isolated"
      - "isolated_online"

  - name: environment
    displayName: "Select Environment"
    type: string
    default: dev
    values:
      - dev
      - test
      - prod

variables:
  - group: TerraformSecrets

stages:
  - stage: Terraform_Backend_Setup
    displayName: "Ensure Backend Infra Exists"
    jobs:
      - job: Create_Backend
        displayName: "Setup RG, SA, Container"
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: AzureCLI@2
            displayName: "Ensure Backend Infra"
            inputs:
              azureSubscription: "Terraform Deployment Connection_1"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                RG_NAME="rg-dev-001"
                SA_NAME="tfstatedemonew"
                CONTAINER_NAME="tfstate"
                LOCATION="Canada Central"

                echo "Creating RG if not exists..."
                az group show --name $RG_NAME || az group create --name $RG_NAME --location $LOCATION

                echo "Creating Storage Account if not exists..."
                az storage account show --name $SA_NAME --resource-group $RG_NAME || \
                  az storage account create --name $SA_NAME --resource-group $RG_NAME --location $LOCATION --sku Standard_LRS

                echo "Getting key..."
                KEY=$(az storage account keys list --account-name $SA_NAME --resource-group $RG_NAME --query '[0].value' -o tsv)

                echo "Creating Container if not exists..."
                az storage container show --name $CONTAINER_NAME --account-name $SA_NAME --account-key $KEY || \
                  az storage container create --name $CONTAINER_NAME --account-name $SA_NAME --account-key $KEY
            env:
              AZURE_DEVOPS_EXT_AZURE_RM_SERVICE_PRINCIPAL_KEY: $(ARM_CLIENT_SECRET)

  - stage: Terraform_Deployment
    displayName: "Terraform Deploy (${{ parameters.environment }})"
    dependsOn: Terraform_Backend_Setup
    jobs:
      - deployment: TerraformJob
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: TerraformInstaller@1
                  inputs:
                    terraformVersion: '1.9.2'

                - task: AzureCLI@2
                  displayName: "Terraform Init"
                  inputs:
                    azureSubscription: "Terraform Deployment Connection_1"
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
                      terraform init -input=false \
                        -backend-config="resource_group_name=rg-${{ parameters.environment }}-001" \
                        -backend-config="storage_account_name=tfstate${{ parameters.environment }}" \
                        -backend-config="container_name=tfstate" \
                        -backend-config="key=${{ parameters.folderName }}-${{ parameters.environment }}.tfstate" \
                        -backend-config="use_azuread_auth=true"
                  env:
                    ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
                    ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"
                    ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
                    ARM_TENANT_ID: "$(ARM_TENANT_ID)"

                - script: |
                    cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
                    terraform validate
                  displayName: "Terraform Validate"

                - task: AzureCLI@2
                  displayName: "Terraform Plan"
                  inputs:
                    azureSubscription: "Terraform Deployment Connection_1"
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
                      terraform plan -out=tfplan -input=false
                  env:
                    ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
                    ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"
                    ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
                    ARM_TENANT_ID: "$(ARM_TENANT_ID)"

                - task: AzureCLI@2
                  displayName: "Terraform Apply"
                  inputs:
                    azureSubscription: "Terraform Deployment Connection_1"
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      cd $(Build.SourcesDirectory)/${{ parameters.folderName }}
                      terraform apply -auto-approve tfplan
                  env:
                    ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
                    ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"
                    ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
                    ARM_TENANT_ID: "$(ARM_TENANT_ID)"
